@startuml

package dao {


    interface ReservationDao{
        getUserByReservationId(reservationId : int): User
        getOfferByReservationId(reservationId : int): Offer
        getAvailabilityByOfferAndDates(offerId : int, dateStartBooking : Date, dateEndBooking : Date) : boolean
    }
    class ReservationDaoMySQL
    AbstractFactoryDao <|-- FactoryDaoSQL
    ReservationDao <|.. ReservationDaoMySQL

    interface DAO<T>{
        find(id : int) : T
        create(T obj) : T
        update(T obj) : T
        delete(T obj) : boolean
    }

    abstract AbstractFactoryDao{
        - {static } final connectionDB : ConnectionDB
        + {static} getFactory(type : TypeDB) : AbstractFactoryDao
        + getReservationDao() : ReservationDao
    }

    class FactoryDaoSQL{
    }


    DAO <|-- ReservationDao
}
package db{
    class ConnectionDBMySQL{
        - connection : Connection
        - ConnectionDBMySQL()
        + {static} getInstance() : ConnectionDBMySQL
        + getDb() : Connection
    }

    class LazyHolderDB{
        + {static} final INSTANCE : ConnectionDBMySQL
    }
    interface ConnectionDB
    ConnectionDBMySQL -Left-> LazyHolderDB
    ConnectionDBMySQL .up.|> ConnectionDB

}
package business{
    class SessionFacade{
            + getUser()
        }

    class ReservationFacade{
        + ReservationFacade()
        + reserve(offerId : int, dateStartBooking : Date, getDateEndBooking : Date) : Void
        + viewAvailability(offerId : int)
        + viewActiveReservations()
        + confirmReservation(reservationId : int)
        + cancelReservation(reservationId : int)
    }

    class Reservation{
        -dateStartBooking : Date
        -dateEndBooking : Date
        -isConfirmed : boolean
        +Reservation(dateS : Date, sateE : Date)
        +getDateStartBooking() : Date
        +getDateEndBooking() : Date
        +getIsConfirmed() : boolean
        +getUser() : User
        +getOffer() : Offer
        +setDateStartBooking(dateS : Date)
        +setDateEndBooking(dateE : Date)
        +setIsConfirmed(confirmed : boolean)
    }
    ReservationFacade --> SessionFacade

}

package gui{

    class LoadView{
        + {static} load(nameFxml : Parent) : Parent
        + {static} changeScreen(actionEvent : ActionEvent, view : String) : void
    }

    package controller{
        class ReservationAvailabilityController{
            - calendar : DatePicker
            - error_availability_msg : Label
            + handleReservation(offerId : int, dateStartBooking : Date, dateEndBooking : Date) : void
            + handleOfferAvailability(offerId : int)
        }

        class ReservationManagementController{
            - infos_offer : TextArea
            + handleActiveReservation()
            + handleReservationConfirmation()
            + handleCancelReservation()
        }

    }
}

ReservationFacade <--Up- ReservationAvailabilityController
ReservationFacade <--Up- OfferController
ReservationFacade <--Up- ReservationManagementController
ReservationFacade .Up.> AbstractFactoryDao



@enduml