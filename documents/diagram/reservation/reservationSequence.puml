@startuml
title Login Diagram

actor User
participant "CreateReservation (fxml)"
participant ReservationController
participant ReservationFacade
participant SessionFacade
participant AbstractFactoryDAO
participant FactoryDAOMySQL
participant ReservationDAOMySQL
participant Connection
participant Statement
database DB


"CreateReservation (fxml)"-->User: Display the form to book an offer (calendar)

activate "CreateReservation (fxml)"
activate User
activate DB


User->"CreateReservation (fxml)": Enter the booking information (dateStartBooking : Date, dateEndBooking : Date)

"CreateReservation (fxml)"->ReservationController: handleReservation(actionEvent : ActionEvent)

activate ReservationController

ReservationController->ReservationFacade:reserve(dateStartBooking : Date, dateEndBooking : Date)

deactivate ReservationController

activate ReservationFacade

ReservationFacade->AbstractFactoryDAO:getInstance()
activate AbstractFactoryDAO

AbstractFactoryDAO--> ReservationFacade : FactoryDAOMySQL
deactivate AbstractFactoryDAO

ReservationFacade -> FactoryDAOMySQL:getReservationDAO()

activate FactoryDAOMySQL

FactoryDAOMySQL->ReservationDAOMySQL **:Create(connection)

activate ReservationDAOMySQL
FactoryDAOMySQL-->ReservationFacade:ReservationDAOMySQL

deactivate FactoryDAOMySQL

ReservationFacade->ReservationDAOMySQL: getAvailabilityByOfferAndDates(offerId : int, dateStartBooking : Date, dateEndBooking : Date)

ReservationDAOMySQL->Connection: prepareStatement()
activate Connection
Connection-->Statement **: Create

activate Statement

Connection-->ReservationDAOMySQL: Statement

deactivate Connection

ReservationDAOMySQL->Statement:executeQuery()

Statement->DB: SQL Query

DB->Statement:Result

Statement-->ReservationDAOMySQL: ResultSet

deactivate Statement

ReservationDAOMySQL-->ReservationFacade: return boolean

alt boolean == true (offer available)

    ReservationFacade->SessionFacade: getUser()
    activate SessionFacade
    SessionFacade-->ReservationFacade: return user
    deactivate SessionFacade

    ReservationFacade->ReservationDAOMySQL: create(new Reservation (offerId : int, userId : int, dateStartBooking : Date, getDateEndBooking : Date))

    ReservationDAOMySQL->Connection: prepareStatement()
    activate Connection
    Connection-->Statement **: Create

    activate Statement

    Connection-->ReservationDAOMySQL: Statement

    deactivate Connection

    ReservationDAOMySQL->Statement:executeQuery()

    Statement->DB: SQL Query

    DB->Statement:Result

    Statement-->ReservationDAOMySQL: ResultSet

    deactivate Statement

    ReservationDAOMySQL-->ReservationFacade: return new(Reservation) : Reservation

else offer not available
    ReservationFacade-->ReservationFacade:DatesUnavailableException raised
end

ReservationFacade-->ReservationController : return reservation
    activate ReservationController

    deactivate ReservationFacade

ReservationController-->"CreateReservation (fxml)": Display well inserted reservation or view with error messages (dates unavailable)

deactivate ReservationController

"CreateReservation (fxml)"-->User: Display corresponding View
deactivate "CreateReservation (fxml)"
deactivate DB
deactivate User

@enduml