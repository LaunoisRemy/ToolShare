@startuml

package dao {


    abstract ScoreOfferDao{
         # ScoreOfferDao()
         + {static} getInstance() : CommentDao
         - {static} LazyHolder()
    }
    class ScoreOfferDaoMySQL
        abstract CommentDao{
         # CommentDao()
         + {static} getInstance() : CommentDao
         - {static} LazyHolder()
    }
    class CommentDaoMySQL

    AbstractFactoryDao <|-- FactoryDaoSQL
    ScoreOfferDao <|-- ScoreOfferDaoMySQL
    CommentDao <|-- CommentDaoMySQL

    interface DAO<T>{
        find(id : int) : T
        create(T obj) : T
        update(T obj) : T
        delete(T obj) : boolean
    }

    abstract AbstractFactoryDao{
        - {static} final connectionDB : ConnectionDB
        + {static} getFactory(type : TypeDB) : AbstractFactoryDao
        + getScoreOfferDao() : ScoreOfferDao
        + getCommentDao() : ScoreOfferDao
    }

    class FactoryDaoSQL{
    }

    DAO <|..Right ScoreOfferDao
    DAO <|..left CommentDao
}
package db{
    class ConnectionDBMySQL{
        - connection : Connection
        - ConnectionDBMySQL()
        + {static} getInstance() : ConnectionDBMySQL
        + getDb() : Connection
    }

    class LazyHolderDB{
        + {static} final INSTANCE : ConnectionDBMySQL
    }
    interface ConnectionDB
    ConnectionDBMySQL -Left-> LazyHolderDB
    ConnectionDBMySQL .up.|> ConnectionDB

}
package business{
    class SessionFacade{
        + SessionFacade()
        + login(mail : String, password : String) : Void
        + register(email : String, firstName : String, lastName : String, city : String, phoneNumber : String, password : String) : Void
        + getInstance() : SessionFacade
    }

    class EvaluationFacade{
        + rate(offerId : int, rate : int) : Void
        + comment(offerId : int, comment : String) : Void
        + deleteComment(commentId : int) : Void
        + deleteRate(idRate : int) : Void
        + updateComment(commentId: int, idRate : int, userID; int)
    }
    class ScoreOffer{
        - scoreId : int
        - rate : float
        - offerId : int
        - commentId : int
        - userId : int
        + getScoreId() : int
        + getUserId() : int
        + getCommentId() : int
        + getRate() : float
    }

    class Comment{
    - commentId : int
    - comment : String
    - commentScore : int
    + getCommentId() : int
    + getComment() : String
    + getCommentScore() : int
    + setComment(comment : String)
    }
}

package gui{

    class LoadView{
        + {static} load(nameFxml : Parent) : Parent
        + {static} changeScreen(actionEvent : ActionEvent, view : String) : void
    }

    package controller{

        class EvaluationController{
            - commentArea : JFXTextArea
            - rateArea : Rating

            + handleRate(actionEvent : ActionEvent ) : void
            + handleComment(actionEvent : ActionEvent) : void

        }
        class HistoryController{
            - infos_offer : ListView
            - commentArea : JTextArea
            - rateArea : JButtonBar
            + handleOffersFromHistory(actionEvent : ActionEvent) : void
            + handleNewRate(actionEvent : ActionEvent) : void

        }
        class OfferController{
            + handleDeleteComment(actionEvent : ActionEvent) : void
            + handleUpdateComment(actionEvent : ActionEvent) : void
            + handleDeleteRate(actionEvent : ActionEvent) : void

        }
        note right : OfferController from offerClass

    }
}

EvaluationFacade <--Up- EvaluationController
EvaluationFacade <--Up- OfferController
EvaluationFacade --> SessionFacade
EvaluationFacade --> CommentDao
EvaluationFacade --> ScoreOfferDao
CommentDao --> AbstractFactoryDao
ScoreOfferDao --> AbstractFactoryDao



@enduml