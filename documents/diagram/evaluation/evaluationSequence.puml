@startuml
title Evaluation Diagram

actor User
participant "History (fxml)"
participant "Evaluation (fxml)" as evView
participant HistoryController
participant EvaluationController
participant EvaluationFacade
participant SessionFacade
participant AbstractFactoryDAO
participant FactoryDAOMySQL
participant ScoreOfferDAOMySql
participant CommentDAOMySQL
participant Connection
participant Statement
database DB


"History (fxml)"-->User: Display history offers

activate "History (fxml)"
activate User
activate DB
activate SessionFacade
activate Connection

User->"History (fxml)": Rate an offer

"History (fxml)"->HistoryController: handleNewRate(actionEvent ActionEvent)

activate HistoryController
HistoryController --> evView :  Display view to rate
deactivate HistoryController
activate evView
evView -> EvaluationController : handleRate(actionEvent ActionEvent)

activate EvaluationController
EvaluationController->EvaluationFacade: rate(offerID : int, rate : int)



activate EvaluationFacade

EvaluationFacade->AbstractFactoryDAO:getInstance()
activate AbstractFactoryDAO


AbstractFactoryDAO--> EvaluationFacade : FactoryDAOMySQL
deactivate AbstractFactoryDAO

EvaluationFacade -> FactoryDAOMySQL:getScoreOfferDAO()

activate FactoryDAOMySQL

FactoryDAOMySQL->ScoreOfferDAOMySql **:Create(connection)

activate ScoreOfferDAOMySql
FactoryDAOMySQL-->EvaluationFacade:ScoreOfferDAOMySql

deactivate FactoryDAOMySQL
EvaluationFacade -> SessionFacade : getUser()
SessionFacade --> EvaluationFacade : user
EvaluationFacade->ScoreOfferDAOMySql: create(new ScoreOffer(offerID: int, rate :int, userId : int))

ScoreOfferDAOMySql->Connection: prepareStatement()


Connection-->Statement **: Create

activate Statement

Connection-->ScoreOfferDAOMySql: Statement



ScoreOfferDAOMySql->Statement:executeQuery()

Statement->DB: SQL Query

DB->Statement:Result

Statement-->ScoreOfferDAOMySql: ResultSet

deactivate Statement

ScoreOfferDAOMySql-->EvaluationFacade: return scoreOffer
deactivate ScoreOfferDAOMySql


EvaluationFacade --> EvaluationController : return scoreOffer
note right
    Return ScoreOffer in this case
    (Because we put ourselves in the situation
    where there is no system error.)
end note



EvaluationController --> evView : Display box choice comment
evView --> User : Display box choice comment
User -> evView : Choose to comment
evView -> EvaluationController : handleComment(actionEvent ActionEvent)
deactivate evView
EvaluationController -> EvaluationFacade : comment(offerId : int, comment : String, ScoreOfferId : int)
EvaluationFacade -> FactoryDAOMySQL : getCommentDao()
activate FactoryDAOMySQL
FactoryDAOMySQL -> CommentDAOMySQL **: create(connection)
activate CommentDAOMySQL
FactoryDAOMySQL --> EvaluationFacade : CommentDaoMySQL
deactivate FactoryDAOMySQL
EvaluationFacade -> CommentDAOMySQL : create(new Comment(offerId : int, comment : String, ScoreOfferId : int))

CommentDAOMySQL->Connection: prepareStatement()

Connection-->Statement **: Create

activate Statement

Connection-->CommentDAOMySQL: Statement


CommentDAOMySQL->Statement:executeQuery()

Statement->DB: SQL Query

DB->Statement:Result

Statement-->CommentDAOMySQL: ResultSet

deactivate Statement
CommentDAOMySQL --> EvaluationFacade : return comment
deactivate CommentDAOMySQL
EvaluationFacade --> EvaluationController : return comment
deactivate EvaluationFacade
EvaluationController --> "History (fxml)" : Display history
deactivate EvaluationController
deactivate EvaluationFacade

deactivate HistoryController

"History (fxml)" --> User: Display corresponding View

deactivate "History (fxml)"
deactivate DB
deactivate User

@enduml