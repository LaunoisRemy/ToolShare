@startuml

package dao {


    interface OfferDao{
        getOffersFromUser(userId : int) : ArrayList<Offer>
        getOffersByCity(city : String) : ArrayList<Offer>
        getLatestOffers() : ArrayList<Offer>
        offerExists(id : int) : boolean
    }
    class OfferDaoMySQL
    FactoryDaoSQL .up.|> AbstractFactoryDao
    OfferDaoMySQL .up.|> OfferDao
    interface FavoryDao{
        getAllFavoryByIdUser(idUser : int) : ArrayList<Favory>
        getAllUserByIdUser(idOffer : int) : ArrayList<Offer>
        getFavory(favory : FavoryOffer) : FavoryOffer
    }
    class FavoryDaoMySQL
    FavoryDaoMySQL .up.|> FavoryDao

    interface DAO<T>{
        find(id : int) : T
        create(T obj) : T
        update(T obj) : T
        delete(T obj) : boolean
    }

    abstract AbstractFactoryDao{
        - {static } final connectionDB : ConnectionDB
        + {static} getFactory(type : TypeDB) : AbstractFactoryDao
        + getOfferDao() : OfferDao
    }

    class FactoryDaoSQL{
    }


    DAO <|-left OfferDao
    DAO <|- FavoryDao
}
package db{
    class ConnectionDBMySQL{
        - connection : Connection
        - ConnectionDBMySQL()
        + {static} getInstance() : ConnectionDBMySQL
        + getDb() : Connection
    }

    class LazyHolderDB{
        + {static} final INSTANCE : ConnectionDBMySQL
    }
    interface ConnectionDB
    ConnectionDBMySQL -Left-> LazyHolderDB
    ConnectionDBMySQL .up.|> ConnectionDB

}
package business{
    class SessionFacade{
        + SessionFacade()
        + getUser() : User
    }

    class Offer{
        -offerId : int
        -title : String
        -pricePerDay : int
        -description : String
        -toolState : String
        -isPriority : boolean
        -userId : int
        -categoryId : int
        + Offer()
        + getOfferId() : int
        + getTitle() : String
        + getPricePerDay() : int
        + getDescription() : String
        + getUserId() : int
        + getCategoryId() : int
        + setTitle(title:String) : void
        + setDescription(description:String) : void
        + setPricePerDay(price:int) : void
        + setUserId(userId:int) : void
        + setCategoryId(categoryId:int) : void
        + setIsPriority(b:boolean) : void
    }

    class FavoryOffer{
        - idUser : int
        - idOffer : int
        + getUserId() : int
        + getOfferId() : int
    }
    class HomePageFacade{
        + HomePageFacade()
        + favOffer(offerId : int)
    }

}

package gui{

    class LoadView{
        + {static} load(nameFxml : Parent) : Parent
        + {static} changeScreen(actionEvent : ActionEvent, view : String) : void
    }

    package controller{
        class HomePageController{
            + handleFavOffer(offerID : int)
        }
        class NavBarController{
            + handleViewMyOffers(actionEvent : ActionEvent) : void
            + handleViewOffers(actionEvent : ActionEvent) : void
            + handleViewFavorites(actionEvent : ActionEvent) : void
            + handleViewHistory(actionEvent : ActionEvent) : void
            + handleViewProfile(actionEvent : ActionEvent) : void
        }
    }
}
HomePageFacade <--Up- HomePageController
SessionFacade <--Up- HomePageFacade
HomePageFacade .Up.> AbstractFactoryDao



@enduml